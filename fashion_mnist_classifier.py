# -*- coding: utf-8 -*-
"""Fashion MNIST classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10ZFLQe8ZQNf-4zkm4tiK50hL-xN_1GIZ

## Libraries and dataset importing
"""

import tensorflow as tf
from tensorflow import keras
import numpy as np

# Get the dataset and create the training and validation directories

fashion_mnist = keras.datasets.fashion_mnist
(x_train_full, y_train_full), (x_test, y_test) = fashion_mnist.load_data()

x_train_full.shape # Means 60000 images of size (28 x 28) each

x_valid, x_train = x_train_full[:5000]/255.0, x_train_full[5000:]/255.0
y_valid, y_train = y_train_full[:5000], y_train_full[5000:]

class_names = ["T-shirt/top", "Trouser", "Pullover", "Dress", "Coat", "Sandal", "Shirt", "Sneaker", "Bag", "Ankle boot"]

"""## Model development and Analysis"""

model = keras.models.Sequential()
model.add(keras.layers.Flatten(input_shape=[28, 28]))
model.add(keras.layers.Dense(300, activation='relu'))
model.add(keras.layers.Dense(100, activation='relu'))
model.add(keras.layers.Dense(10, activation="softmax"))

model.summary()

# Get the model layers
model.layers

weights, biases = model.layers[1].get_weights()
print(weights)

weights.shape

biases.shape

"""## Model compilation and Training"""

model.compile(loss=keras.losses.sparse_categorical_crossentropy,
              optimizer = keras.optimizers.SGD(),
              metrics=['accuracy'])

history = model.fit(x_train, y_train, epochs=30, validation_data=(x_valid, y_valid))

history.history.keys()

"""## Visualize the training process"""

import pandas as pd
import matplotlib.pyplot as plt

pd.DataFrame(history.history).plot(figsize=(8, 5)) # 8- Length and 5 - height
plt.grid(True)
plt.gca().set_ylim(0, 1) # Set the vertical range to [0 - 1]
plt.show()



"""## Evaluate the model"""

model.evaluate(x_test, y_test)

x_new = x_test[:3]
y_proba = model.predict(x_new)
y_proba.round(2)

# Predictions
y_pred = model.predict_classes(x_new)
y_pred

# Class names
np.array(class_names)[y_pred]

# Actual values
y_new = y_test[:3]
y_new

"""### As the values are matching hence the model made the correct predictions"""